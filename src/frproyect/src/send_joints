#!/usr/bin/env python3

import rospy
from std_msgs.msg import Float64
import time

if __name__ == "__main__":
    # Inicializar nodo
    rospy.init_node("send_joint")

    # Crear publishers para cada articulaci√≥n
    pub_joint1 = rospy.Publisher('/myrobot/joint_1_position_controller/command', Float64, queue_size=10)
    pub_joint2 = rospy.Publisher('/myrobot/joint_2_position_controller/command', Float64, queue_size=10)
    pub_joint3 = rospy.Publisher('/myrobot/joint_3_position_controller/command', Float64, queue_size=10)
    pub_joint4 = rospy.Publisher('/myrobot/joint_4_position_controller/command', Float64, queue_size=10)
    pub_joint5 = rospy.Publisher('/myrobot/joint_5_position_controller/command', Float64, queue_size=10)
    pub_joint6 = rospy.Publisher('/myrobot/joint_6_position_controller/command', Float64, queue_size=10)
    pub_joint7 = rospy.Publisher('/myrobot/joint_7_position_controller/command', Float64, queue_size=10)

    rospy.sleep(1.0)  # Esperar a que los publishers se conecten

    # Posiciones deseadas en radianes (excepto prismatic joint en metros)
    q = [0.5, 0.3, -0.8, 1.2, 0.0, -1.0, 0.6]  # Ejemplo

    pub_joint1.publish(q[0])
    pub_joint2.publish(q[1])
    pub_joint3.publish(q[2])
    pub_joint4.publish(q[3])
    pub_joint5.publish(q[4])
    pub_joint6.publish(q[5])
    pub_joint7.publish(q[6])

    rospy.loginfo("Posiciones articulares enviadas.")
